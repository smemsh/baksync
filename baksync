#!/bin/bash
#
# baksync
#   synchronize local lvm-backed filesystems with remote mirror via snapshot
#
# args:
#   - $1 can optionally be '-n' to give to rsync (test mode, do nothing)
#   - rest of args are volume names to backup (use hardcoded list if none)
#
# deps:
#   - rsync present on local and remote
#   - ssh daemon on remote, allowing root access
#   - local filesystems to backup are backed by lvm (for snapshots)
#
# todo:
#   - allow specification of multiple vgs too, not just lvs
#
# note:
#   - set rsync path excludes per-lv in $rcfile using add_excludes()
#   - override any other configuration variables therein as well
#   - no plans to handle spaces in backup paths, exclude paths, mount points
#
# scott@smemsh.net
# http://smemsh.net/src/baksync/
# http://spdx.org/licenses/GPL-2.0.html
#
##############################################################################

invname=${0##*/}
setenv () { local v=$1; shift; IFS= eval $v="\$*"; }
addarr () { local v=$1; shift; eval $v+=\(\"\$@\"\); }
setarr () { local v=$1; shift; eval $v=\(\"\$@\"\); }
warn   () { echo "$invname: ${FUNCNAME[1]}: $*" >&2; }
bomb   () { warn "$@"; false; exit; }

# set defaults before rcfile overrides
#
setenv baksrv		localhost
setenv sshcmd		'ssh'
#setenv sshcmd		'ssh -l backups'
setenv srcvg		baksrv
setenv snaplv		baksnap
setenv bakroot		/srv/bak/rsyncs
setenv snapmnt		/var/tmp/snapmnt
setenv rcfile		~/.baksyncrc
setenv snapsz		1G

# has to be defaulted inline or it will always have to be supplied
# because overrides happen later and expansion happens here
#
#setenv destdir          $srcvg

# lvnames to back up in $srcvg volume group
# (if any argv given, they replace these defaults)
#
setarr bakvols \
	root \
	home \
	local \
	usr \
	var \
;

# default arguments for rsync
# (append to, or replace in rcfile if desired)
#
setarr rsyncargs \
	-i \
	-z \
	-aHx \
	--delete \
	--delete-excluded \
	--delete-after \
	--partial \
	--sparse \
	--inplace \
	--numeric-ids \
;

# if we don't announce this ahead of time, first assignment
# makes it integer-indexed
#
declare -A excludes

##############################################################################

parse_args ()
{
	declare -g testflag

	if [[ $1 == '-n' ]]; then
		rsyncargs+=('-n')$1; shift; fi;

	if [[ $1 == -* ]]; then
		warn "only '-n' option available, aborting"
		false
		return
	fi

	# command line specified volumes replace all
	# previously defined
	#
	if (($#)); then
		setarr bakvols "$@"; fi
}

# we store per-lv exclude pattern lists in associative array
# $excludes[] indexed by volume, newlines delimiting each pattern.
# this func appends one or more exclude strings, or creates if dne
#
# TODO: maybe spaces are ok as rsync patterns, newlines unnecessary?
# TODO: don't newlines break it if they are embedded in the filename?
# TODO: just use an rsync-syntax exclude file directly?  in
#       meantime each is given as a separate '--exclude=' to rsync
#
add_excludes ()
{
	local i
	local key=${1:?}; shift
	local val="${excludes[$key]}" # append if previous value

	while (($#)); do
		val+=$'\n'
		val+="$1"
		shift
	done

	excludes[$key]="$val"
}

initvars ()
{
	local vol

	# rcfile overrides hardcoded defaults at top
	#
	if test -e $rcfile; then
		source $rcfile; fi

	# command line overrides both default and rcfile specified
	#
	parse_args "$@" ||
		bomb "bad arg parse"
	
	# all the dictionary entries have to be initialized
	# (set, but empty) if nothing set them, otherwise 'set -e'
	# causes problems later
	#
	for vol in ${bakvols[@]}; do
		test -v "excludes[$vol]" ||
			excludes[$vol]=''; done

	# set volume paths and ssh command only after overrides consulted
	#
	setenv vgdev        /dev/$srcvg
	setenv snapvol      $vgdev/$snaplv
	addarr rsyncargs    "--rsh=$sshcmd"
	addarr snapargs     '--name' "$snaplv"
	addarr snapargs     '--size' "$snapsz"
}

volume_start_print ()
{
	local vol=${1:?}
	: ${firstrun:=1}	# we run under set -u

	# so that we have a blank line between runs, but not
	# before the first one (by test $firstrun), and not
	# after the last one (by doing at start instead of end)
	#
	# TODO: what about if rsync does nothing for a volume,
	#       ie no copies? it will have a needless blank line
	#
	if ((!firstrun)); then
		echo; fi

	echo "syncing $vol..."

	firstrun=0
}

volume_end_print () { :; }

##############################################################################

main ()
{
	local vol

	cd /
	initvars "$@"
	set -ue

	for vol in ${bakvols[@]}
	do
		# often a path is given
		# TODO: if slash, use findmnt to look up the volume
		vol=${vol%/}
		vol=${vol#/}
		destpath=$bakroot/${destdir:-$srcvg}/$vol

		args=("${rsyncargs[@]}")
		for x in ${excludes[$vol]}; do
			args+=(--exclude=$x); done

		volume_start_print $vol
		$sshcmd $baksrv test -d $destpath ||
			bomb "bakpath $destpath dne on $baksrv"
		lvcreate --snapshot "${snapargs[@]}" $vgdev/$vol
		mount -o ro $snapvol $snapmnt
		rsync "${args[@]}" $snapmnt/ $baksrv:$destpath/
		umount $snapmnt
		lvremove --force $snapvol

		volume_end_print $vol
	done
}

##############################################################################

main "$@"
